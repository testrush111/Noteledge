@model IEnumerable<prjMSIT127_G2_Noteledge.ViewModel.CChatBeauViewModel>
@{
    ViewBag.Title = "Index";
    int ProductId = ViewBag.ProductId;
}
@helper fnlsChatBeau()
{
    foreach (var beau in Model)
    {
        <ul>
            <a class="beau" data-folderid="@beau.BeauId" onclick="fn更新個人聊天內容(@beau.BeauId)">@beau.Beau&#x1F601;</a>
            <span class="badge" data-count="0">0</span>
        </ul>
    }
}
<style>
    html {
        height: 100%;
    }

    body {
        height: 100%;
        /* min-height: 100%; */
        display: flex;
        flex-direction: column;
    }

    .body-content {
        display: flex;
        flex-direction: column;
        min-height: 100%;
        flex: 1;
    }

    .beau {
        padding: 5px;
        border: 2px solid blue;
    }

    .doflex {
        display: flex;
        flex: 1;
    }

    .lsNote {
        flex: 1;
    }

    .IsContent {
        display: flex;
        flex-direction: column;
        flex: 2;
    }

    #chatroom {
        flex: 1;
        display: flex;
        flex-direction: column;
    }

        #chatroom .text-box-my {
            display: flex;
        }

            #chatroom .text-box-my .padding {
                flex: 1;
            }

            #chatroom .text-box-my .read {
                background-color: aquamarine;
            }

            #chatroom .text-box-my .retract {
                border: 2px solid green;
            }

    #input-box {
        display: flex;
    }

        #input-box.none_display {
            display: none;
        }

        #input-box > input {
            flex: 1;
            max-width: 100% !important;
        }

    .texture {
        padding: 20px;
        width: 250px;
        bottom: 150px;
        position: absolute;
        display: none;
    }

    .badge {
        background-color: red;
    }

        .badge[data-count="0"] {
            display: none;
        }
</style>
<section class="p-lr-80 p-tb-90">
    <h2>Index</h2>
    <div class="doflex" id="app">
        <div class="lsNote">
            @fnlsChatBeau()
            @*<ul v-for="i in chats">
                    <a class="beau" :data-folderid="i.BeauId" :onclick="`fn更新個人聊天內容(${i.BeauId})`">{{i.Beau}}&#x1F601;</a>
                </ul>*@
        </div>
        <div class="IsContent">
            <div id="Productblock">
                @*@Html.Partial("_Productblock")*@
            </div>
            <div id="chatroom">
                @*<div class="text-box-he">
                <span>
                    對方大頭貼
                </span>
                <span>
                    聊天文字
                </span>
            </div>
            <div class="text-box-my">
                <div class="padding">

                </div>
                <span>
                    聊天文字
                </span>
                <span>
                    我方大頭貼
                </span>
            </div>*@
            </div>
            <div class="texture">
                <div>
                    <button name="t1" id="t1" data-folderid="😹" onclick="fn貼圖(t1)">😹</button>
                    <button name="t2" id="t2" data-folderid="😺" onclick="fn貼圖(t2)">😺</button>
                    <button name="t3" id="t3" data-folderid="😻" onclick="fn貼圖(t3)">😻</button>
                    <button name="t4" id="t4" data-folderid="😼" onclick="fn貼圖(t4)">😼</button>
                    <button name="t5" id="t5" data-folderid="😽" onclick="fn貼圖(t5)">😽</button>
                </div>
                <div>
                    <button name="t6" id="t6" data-folderid="😀" onclick="fn貼圖(t6)">😀</button>
                    <button name="t7" id="t7" data-folderid="😁" onclick="fn貼圖(t7)">😁</button>
                    <button name="t8" id="t8" data-folderid="😂" onclick="fn貼圖(t8)">😂</button>
                    <button name="t9" id="t9" data-folderid="😃" onclick="fn貼圖(t9)">😃</button>
                    <button name="t10" id="t10" data-folderid="😄" onclick="fn貼圖(t10)">😄</button>
                </div>
                <div>
                    <button name="t11" id="t11" data-folderid="😅" onclick="fn貼圖(t11)">😅</button>
                    <button name="t12" id="t12" data-folderid="😆" onclick="fn貼圖(t12)">😆</button>
                    <button name="t13" id="t13" data-folderid="😇" onclick="fn貼圖(t13)">😇</button>
                    <button name="t14" id="t14" data-folderid="😈" onclick="fn貼圖(t14)">😈</button>
                    <button name="t15" id="t15" data-folderid="😉" onclick="fn貼圖(t15)">😉</button>
                </div>
            </div>
            <div id="input-box" class="none_display">
                <button onclick="fn貼圖顯示()"><img src="~/Content/smile.png" width="50" height="50" /></button>
                <input type="text" id="message" oninput="textInput(this.value)" />
                <button id="send-message" onclick="fn新增聊天(chatbeauid)" disabled>送出</button>
            </div>
        </div>
    </div>
</section>
@section scripts{
    @*<script src="https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js"></script>*@

    <script>
    //function fntest(a) {
    //    console.log(a);
    //}
    //var charId = 0;
        $(document).ready(function () {
            $.ajax({
                url: "@Url.Action("Productblock","Chat")",
                type: "POST",
                data: { ProductId:@ProductId},
                success: function (msg) {
                    $("#Productblock").html(msg);
                }
            });
    })

    function textInput(text) {
        var sendButton = document.querySelector('#send-message');
        if (text.match(/^\s*$/))
            sendButton.setAttribute('disabled', '');
        else
            sendButton.removeAttribute('disabled');
    }

        let chatbeauid = 0;

    function fn更新個人聊天內容(charId) {
        $.ajax({
            url: `/api/ChatContent/Search/${charId}`,
            type: "GET",
            dataType: "json",
            data: {},
            success: function (msg) {
                document.querySelector('#input-box').classList.remove('none_display');
                let chatroom = document.querySelector('#chatroom');
                chatbeauid = charId;

                chatroom.innerText = '';
                console.log(msg);
                for (let i of msg) {
                    chatroom.appendChild(createTextBox(i, charId != i.fMemberFrom));
                }
            }
        });
        fn已讀更新(charId);
         let badge = $(`.doflex > .lsNote > ul > .beau[data-folderid="${charId}"] + .badge`);
         badge.text(0);
         badge.attr('data-count', 0);
        //$("#chatroom .text-box-my .retract").click(function () {
        //    console.log("收回");
        //});
    }

        function createTextBox(msg, isMy) {
            var name = document.createElement('span');
            var message = document.createElement('span');
            var box = document.createElement('div');
            var read = document.createElement('div');
            read.classList.add('read');
            var retract = document.createElement('div');
            retract.classList.add('retract');
            retract.setAttribute('id', msg.fChatId);
            retract.setAttribute("onclick", "fn聊天收回()");
            if (msg.fIsRead == false) {
                read.innerText = "未讀";
            }
            else {
                read.innerText = "已讀";
            }

            if (msg.fIsRetract == true) {
                message.innerText = "已收回"
            }
            else {
                message.innerText = msg.fMessage;
                retract.innerText = " 收回"
            }

            if (isMy) {
                var padding = document.createElement('div');
                padding.classList.add('padding');

                name.innerText = ' < 我方'
                box.classList.add('text-box-my');
                box.appendChild(padding);
                box.appendChild(read);
                box.appendChild(message);
                box.appendChild(name);
                box.appendChild(retract);
            } else {
                name.innerText = '對方 > '
                box.classList.add('text-box-he');
                box.appendChild(name);
                box.appendChild(message);
            }
            return box;
        }

        function fn新增聊天(chatbeauid) {
            $.ajax({
                url: `/api/ChatContent/Insert`,
                type: "POST",
                dataType: "json",
                data: { fMemberTo: chatbeauid, fMessage: document.querySelector('#message').value },
                success: function (msg) {
                    console.log(msg);
                }
            });
            fn更新個人聊天內容(chatbeauid);
            document.querySelector('#message').value = "";
            textInput('');
            fn更新聊天對象列表(chatbeauid);
        }

        function fn更新聊天對象列表(chatId) {
            var a = document.querySelector(`.doflex > .lsNote > ul > .beau[data-folderid="${chatId}"]`).parentElement;
            var b = document.querySelector('.doflex > .lsNote');

            a.remove();
            b.insertBefore(a, b.children[0]);
        }

        function fn貼圖(a) {
            //console.log(a);
            //console.log(a.textContent);
            $.ajax({
                url: `/api/ChatContent/Insert`,
                type: "POST",
                dataType: "json",
                data: { fMemberTo: chatbeauid, fMessage: a.textContent },
                success: function (msg) {
                    console.log(msg);
                }
            });
            fn更新個人聊天內容(chatbeauid);
            fn更新聊天對象列表(chatbeauid);
            $(".texture").hide();
            //console.log(document.getElementById("😹").textContent);
        }

        function fn貼圖顯示() {
            $(".texture").show();
        }

    function fn聊天收回() {
        let b = event.target.id;
        $.ajax({
            url: `/api/ChatContent/Retract/${b}`,
            type: "GET",
            dataType: "json",
            data: {},
            success: function (msg) {
                console.log(msg);
                fn更新個人聊天內容(chatbeauid);
            }
        });

        }

        function fn已讀更新(charId) {
            $.ajax({
            url: `/api/ChatContent/Read/${charId}`,
            type: "GET",
            dataType: "json",
            data: {},
            success: function (msg) {
                console.log(msg);
            }
        }
        );
        }
    </script>

    <!--Reference the SignalR library. -->
    <script src="/Scripts/jquery.signalR-2.4.1.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="/signalr/hubs"></script>
    <!--Add script to update the page and send messages.-->
    <script>
        $(function () {
            // Declare a proxy to reference the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call to broadcast messages.
            chat.client.hello = function (message) {
                console.log(message);
            };

            chat.client.newMessage = function (from, meaasge, fSubmitDateTime, fProductId) {
                if (chatbeauid == from) {
                    console.log(meaasge);
                    document.querySelector('#chatroom').appendChild(createTextBox({
                        fIsRead: false,
                        fIsRetract: false,
                        fMemberFrom: from,
                        fMemberTo: chatbeauid,
                        fMessage: meaasge,
                        fProductId: fProductId,
                        fSubmitDateTime: fSubmitDateTime
                    }, false));
                    fn已讀更新(chatbeauid);
                } else {
                    fn更新聊天對象列表(from);
                    let badge = $(`.doflex > .lsNote > ul > .beau[data-folderid="${from}"] + .badge`);
                    let count = parseInt(badge.text()) + 1;
                    badge.text(count);
                    badge.attr('data-count', count);
                }
            }

            // Start the connection.
            $.connection.hub.start().done(function () {
                window.sr = chat.server;
                chat.server.sendUserId(@Model.ToArray()[0].MyID);
            });
        });
    </script>
}

@*@foreach (var item in Model)
        {
            <table style="border-right: 2px solid blue;">
                <tr>
                    @Html.DisplayFor(modelItem => item.Beau)
                </tr>
            </table>
    <h2>Index</h2>

        @*<p>
            @Html.ActionLink("Create New", "Create")
        </p>
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Beau)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.BeauId)
                </th>
                <th></th>
            </tr>

        @foreach (var item in Model) {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Beau)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.BeauId)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |
                    @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) |
                    @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
                </td>
            </tr>
        }*@

@*</table>*@


